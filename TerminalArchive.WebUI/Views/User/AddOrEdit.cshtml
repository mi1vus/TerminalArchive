@model TerminalArchive.Domain.Models.User

@{
    ViewBag.Title = "AddOrEdit";
}

<h2>AddOrEdit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>User</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
        
        @if(string.IsNullOrEmpty(Model.Pass))
        { 
            <div class="form-group">
                @Html.LabelFor(model => model.Pass, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Pass, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Pass, "", new { @class = "text-danger" })
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                @Html.LabelFor(model => model.Pass, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Pass, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Pass, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.Pass, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Pass, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Pass, "", new { @class = "text-danger" })
                </div>
            </div>
        }*@
        
        @foreach (var property in ViewData.ModelMetadata.Properties)
        {
            if (property.PropertyName == "Id")
            {
                @Html.Hidden(property.PropertyName)
            }
            else
            if (property.PropertyName == "Pass")
            {
                if (string.IsNullOrEmpty(Model.Name))
                {
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        <div class="col-md-10">
                            @Html.Password(property.PropertyName, null, new { @class = "form-control" })
                            @Html.ValidationMessage(property.PropertyName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.OldPass, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.PasswordFor(model => model.OldPass, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.OldPass, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        <div class="col-md-10">
                            @Html.Password(property.PropertyName, null, new { @class = "form-control" })
                            @Html.ValidationMessage(property.PropertyName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
            }
            else
            if (property.PropertyName == "Roles" && Model.Id != 0)
            {
                    <div class="form-group">
                        <label>@(property.DisplayName ?? property.PropertyName)</label>
                        <div class="col-md-10">
                            @{
                                var roles = Model.Roles.Select(r=>r.Name).Aggregate((current, next) => current + ", " + next);
                            }
                            @Html.Label(roles, null, new {@class = "form-control"})
                        </div>
                    </div>
            }
            else
            if (property.PropertyName != "OldPass")
            {
                <div class="form-group">
                    <label>@(property.DisplayName ?? property.PropertyName)</label>
                    <div class="col-md-10">
                        @Html.Editor(property.PropertyName, null, new { @class = "form-control" })
                        @Html.ValidationMessage(property.PropertyName, "", new { @class = "text-danger" })
                    </div>
                </div>
            }
        }

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
